#!/bin/bash

script() {
    local script_filename="$(lua5.3 -e 'print(string.format("%q", arg[1]))' - "$(pwd)/$1" </dev/null)"
    shift

    local lua_args=$(lua5.3 -e 'io.stdout:write "{"; for i = 1, #arg do io.stdout:write(string.format("%q, ", arg[i])) end; io.stdout:write "}"' - "$@" </dev/null)

    cat <<END_LUA
local __print_lines = {}

local function print(...)
  local nargs = select('#', ...)
  local line_chunks = {}
  for i = 1, nargs do
    local arg = select(i, ...)
    line_chunks[i] = tostring(arg)
  end
    __print_lines[#__print_lines + 1] = table.concat(line_chunks, ' ')
end

local require

do
  local __inline_module_loaders = {}
  local __inline_modules = {}

  --[[ local ]] function require(modname)
    local module = __inline_modules[modname]
    if module then
      return module
    end

    local loader = __inline_module_loaders[modname]
    if not loader then
      error(string.format('module %q not found', modname))
    end

    module = loader()
    __inline_modules[modname] = module
    return module
  end

END_LUA

    for filename in lib/*.lua ; do
        local path=$(lua5.3 -e 'print(string.format("%q", arg[1]))' - "$(pwd)/$filename" </dev/null)
        local module_name="$filename"
        module_name="${module_name##lib/}"
        module_name="${module_name%%.lua}"
        module_name="${module_name//\//.}"

        echo "__inline_module_loaders[ [[$module_name]] ] = function()"
        echo "  return assert(loadfile($path, 'bt', setmetatable({print = print, require = require}, {__index = _G})))()"
        echo 'end'
        echo ''
    done

    cat <<END_LUA
end

local arg = $lua_args
local ok
local f, err = loadfile($script_filename, 'bt', setmetatable({arg = arg, print = print, require = require}, {__index = _G}))
if not f then
  print(string.format("script failed to load: %s", err))
  goto print
end

ok, err = xpcall(f, debug.traceback, table.unpack(arg))
if err then
  print(string.format("script threw an error: %s", err))
  goto print
end

::print::
return '\\n' .. table.concat(__print_lines, '\\n') .. '\\n'
END_LUA
}

script_name="$1"
shift

# XXX pipe to dbus-send instead?

( script "$script_name" "$@" ) | awesome-client | tail -n +2 | head -n -1
